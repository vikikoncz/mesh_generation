//import com.comsol.model.*;
//import com.comsol.model.util.*;
import java.io.*;
import java.lang.Math;

/*Ez fogja tudni a tenyleges mesh-t letrehozni
*/

public class mesh{
	double [][] vtx;
	int [][] edge;
	mesh_settings mesh_settings;
	parameters par;

	mesh(mesh_settings mesh_settings, parameters par){
		this.mesh_settings=mesh_settings;
		this.par=par;
	}


	//Ez hivja majd meg a beallitasok alapjan a tenyleges VTX eloallito metodust
	// generate_edge()-nek eleg egyszer, vagyis itt szerepelnie
	void generate(){
		
		int n_lepcso = mesh_settings.n_kritikus_zona;  //itt gond lehet meg a kerekitessel
		int n_alap = mesh_settings.n_alap;
		
		vtx=new double [1][mesh_settings.n_mesh+1];   //itt ezzel lehet gond szerintem
		vtx[0][0]=0;
		vtx[0][mesh_settings.n_mesh]=par.L; //TODO par osztaly-t is lathatova kell tenni

		System.out.println("vtx[0][0]="+vtx[0][0]);
		System.out.println("vtx[0][mesh_settings.n_mesh]="+vtx[0][mesh_settings.n_mesh]);
		
		
		double kezdeti_pont=mesh_settings.x_kezdeti_pont;    //mesh surites (lepcso) kezdeti pontja
		double veg_pont=mesh_settings.x_vegpont;   //mesh surites (lepcso) utolso pontja
		
//TODO	ezt a reszt mesh_settings alapjan update-elni	
		int lepcso_bal=(int)Math.rint(n_alap*(kezdeti_pont/(par.L-(veg_pont-kezdeti_pont))));  //egeszosztas marad 	
		int lepcso_jobb=lepcso_bal+n_lepcso;
		int veg=n_alap-lepcso_bal;
//
		
		double r_veg=par.L-veg_pont;  //lepcso-tol jobbra eso resz hossza
		
		//Elso resz bepakolasa a VTX tombbe, ez a lepcso elotti resz
		int h=1;
		
		System.out.println("lepcso_bal="+lepcso_bal);
		double diff_alap=1/mesh_settings.ro_alap;
	
		for(int i=1;i<lepcso_bal;i++){
			vtx[0][i]=(double)diff_alap*h; 
			h++;		
		} 	
		
		vtx[0][lepcso_bal]=kezdeti_pont;
		
		System.out.println("lepcso_jobb="+lepcso_jobb);	


		//Lepcso bepakolasa a VTX tombbe
		int current_i=lepcso_bal;
		for(int i=lepcso_bal+1; i<lepcso_jobb; i++){
			double x_i_prev = vtx[0][i-1];  
			double d_i = 1 / mesh_settings.get_mesh_density(x_i_prev * mesh_settings.scaling_factor);
			vtx[0][i] = vtx[0][i-1] + d_i / mesh_settings.scaling_factor;
			current_i=i; 
			if(vtx[0][i]>veg_pont){
				current_i=current_i-1;
				System.out.println("Cutted points="+(lepcso_jobb - current_i +1));
				break;
			}	
		} 
		
		//vtx[0][lepcso_jobb]=veg_pont;
		vtx[0][current_i+1]=veg_pont;
		current_i=current_i+1;
		diff_alap=(double)r_veg/(mesh_settings.n_mesh-current_i);
		//Utolso, lepcso utani resz bepakolasa a VTX tombbe
		h=1; 	
		for(int i=current_i+1;i<mesh_settings.n_mesh;i++){
			vtx[0][i]=(double)diff_alap*h+vtx[0][current_i];
			h++;	
		}	
		
		this.generate_edge();
	}

	//Edge generalas - ez mindig igy mukodik
	void generate_edge(){
		int n_pont=vtx[0].length-1;
		edge=new int [2][n_pont];
		for(int i=0;i<edge[0].length;i++){
			for(int j=0;j<edge.length;j++){
				if(j==0) edge[j][i]=i;			
				else edge[j][i]=i+1;			
			}
		}
	}

	

	
	

	//Debugging purposes -> checking mesh_steps


	void write_mesh_vtx(){
		System.out.println("Writting VTX");

		int n=vtx[0].length;
		for (int i=0; i<n; i++){
			System.out.println(i+"\t"+vtx[0][i]);

		}			
	}

	void check_vtx(){
		int n=vtx[0].length-1;
		
		int proba=0;

		for (int i=0; i<n; i++){
			if(vtx[0][i+1]<vtx[0][i]){proba=1;}	
		}

		if(proba==0){System.out.println("VTX SZIG MON NO");}
		else{System.out.println("VTX NOT GOOD");}
	}

	

	void write_mesh_vtx_density_FILE() throws IOException{
		String name="mesh_denstity_1.dat";	
		File f=new File(name);
		FileWriter ki_stream = new FileWriter(f);
		PrintWriter ki = new PrintWriter(ki_stream);

		//HEADER
		ki.print("%Szakasz_index"+"\t");
		ki.print("x_coord"+"\t");
		ki.print("mesh_density"+"\n"); //L=1

		int n=vtx[0].length-1;
		
		for (int i=0; i<n; i++){
			double mesh_density=1/(vtx[0][i+1] - vtx[0][i]); 
			double x_coord=(vtx[0][i+1] + vtx[0][i]) / 2;
			ki.println(i+"\t"+x_coord+"\t"+mesh_density);

		}	
		


		ki.close();
	}

	void write_mesh_vtx_FILE() throws IOException{
		String name="mesh_denstity_1.dat";	
		File f=new File(name);
		FileWriter ki_stream = new FileWriter(f);
		PrintWriter ki = new PrintWriter(ki_stream);

		//HEADER
		ki.print("%Szakasz_index"+"\t");
		ki.print("VTX"+"\t");
		ki.print("mesh_density"+"\n"); //L=1

		int n=vtx[0].length-1;
		
		for (int i=0; i<n; i++){
			double mesh_density=1/(vtx[0][i+1] - vtx[0][i]); 
			double x_coord=vtx[0][i];
			ki.println(i+"\t"+x_coord+"\t"+mesh_density);

		}
		
		ki.println(n+"\t"+vtx[0][n]);	
		


		ki.close();
	}

	
}
